service: gittron-bot-api

frameworkVersion: ">=1.1.0 <2.0.0"

package:
  exclude:
    - test/**

custom:
  myStage: ${opt:stage, self:provider.stage}
  myEnvironment:
    ORIGIN:
      prod: "https://gittron.me"
      dev: "*"
    URI_URL:
      prod: "https://data.gittron.me/v1"
      dev: "https://data.gittron.me/dev"

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    ORIGIN: ${self:custom.myEnvironment.ORIGIN.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

functions:
  generatePrimeBot:
    handler: bots/generate-prime-bot.generatePrimeBot
    events:
      - http:
          path: bots/new-prime
          method: post
          cors: true
  cloneBot:
    handler: bots/clone-bot.cloneBot
    events:
      - http:
          path: bots/clone
          method: post
          cors: true
  updateTxStatus:
    handler: bots/update-tx-status.updateTxStatus
    events:
      - http:
          path: bots/update-tx-status/{tokenId}
          method: put
          cors: true
  getTxStatus:
    handler: bots/get-tx-status.getTxStatus
    events:
      - http:
          path: bots/get-tx-status/{tokenId}
          method: get
          cors: true
  hatch:
    handler: bots/hatch.hatch
    events:
      - http:
          path: bots/hatch/{tokenId}
          method: put
          cors: true
  get:
    handler: bots/get.get
    events:
      - http:
          path: bots/{tokenId}
          method: get
          cors: true
  getBotsByRepo:
    handler: bots/get-by-repo.getByRepo
    events:
      - http:
          path: bots/repo/{ghid}
          method: get
          cors: true
  uri:
    handler: bots/token-uri.tokenUri
    events:
      - http:
          path: uri/{tokenId}
          method: get
          cors: true
  all:
    handler: bots/all.all
    events:
      - http:
          path: bots
          method: get
          cors: true
  verifyBot:
    handler: bots/verify-bot.verifyBot
    events:
      - http:
          path: bots/verify/{tokenId}
          method: put
          cors: true
  dashboardBots:
    handler: bots/dashboard-bots.dashboardBots
    events:
      - http:
          path: bots/dashboard
          method: post
          cors: true
  disableBots:
    handler: jobs/disable-bots.disableBots
    events:
      - schedule:
          rate: rate(30 minutes)
          enabled: false

resources:
  Resources:
    BotDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: tokenId
            AttributeType: S
          - AttributeName: ghid
            AttributeType: S
        KeySchema:
          - AttributeName: tokenId
            KeyType: HASH
          - AttributeName: ghid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: byRepo
            KeySchema:
              - AttributeName: ghid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
